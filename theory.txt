-------------------------------------------------------------------------------------------------------------------------------------------------

Перед початком роботи:
- Оновити VScode запускати в терміналі winget upgrade --id Microsoft.VisualStudioCode

- Встановити чи оновити node js
- Встановити чи оновити NPM
- Встановити транспілятор для typescript npm install -g typescript
- Ініциалізувати npm init або npm ci (якщо це скачаний проект)
- Додати GIT
- Додати "type": "module"  в package.json

-------------------------------------------------------------------------------------------------------------------------------------------------

ЛЕКЦІЯ 3. ВСТУП ДО JAVASCRIPT. ЩО ТАКЕ NODE.JS ТА NPM

*** Примітивні типи даних. String
До примітивних типів належать:
string
number
boolean
undefined
null
symbol
BigInt



*** Що таке node.js
Node.js - це відкрите середовище виконання, побудоване на движку V8 JavaScript від Google, яке дозволяє виконувати JavaScript-код на серверному боці. Основною особливістю Node.js є те, що він пропонує асинхронну та подієву модель програмування, що відрізняє його від більшості традиційних серверних середовищ.

Основні переваги Node.js:
1. Асинхронність та ефективність: Node.js використовує однопотокову архітектуру з неблокуючими операціями вводу/виводу, що дозволяє забезпечити високу ефективність та низьку вартість операцій вводу/виводу.
2. Швидкість виконання: Використання движка V8 дозволяє Node.js досягати високої швидкості виконання JavaScript-коду.
3. Розширеність: Велика кількість сторонніх модулів (пакетів) доступних через систему пакетного менеджера npm дозволяє легко додавати функціональність до додатків.
4. Всеохопність: JavaScript використовується на фронтенді та бекенді, що дозволяє розробникам використовувати одну мову програмування на всіх рівнях додатка.
5. Активна спільнота: Node.js має велику та активну спільноту розробників, що забезпечує підтримку, допомогу та створення нових модулів.
6. Підтримка JSON: В Node.js дуже зручно працювати з JSON, що дозволяє зручно обмінюватися даними між клієнтом та сервером.



*** Що таке npm та npx
npm (Node Package Manager)
npm (Node Package Manager) - це стандартний пакетний менеджер для Node.js та середовища виконання JavaScript. Він дозволяє розробникам легко встановлювати, оновлювати та управляти залежностями (пакетами) для своїх проектів.

КОМАНДИ:
npm install -  Встановлює всі залежності, перераховані у файлі package.json. Скорочена версія команди - npm i
npm ci - Встановлює всі залежності з package-lock.json
npm i <packet name> - встановити
npm update - Оновлює всі залежності до останніх версій.
npm uninstall <packet name> - видалити
npm install --save-dev <package-name> - Встановлює пакет як залежність для розробки (devDependencies) у вашому проекті.

npx (Node Package Execute)
npx- це скорочення, яке використовується в екосистемі Node.js. Це команда командного рядка (CLI), яка постачається разом з Node.js починаючи з версії 5.2.0.

NPX дозволяє запускати пакети Node.js, що встановлені локально, безпосередньо з командного рядка. Основне призначення NPX - це запуск програм або пакетів без необхідності встановлення їх глобально на вашому комп'ютері. Він також дозволяє виконувати команди з використанням пакетів, які не є встановленими локально, наприклад, з GitHub чи інших джерел.

Коли ви виконуєте команду за допомогою NPX, він шукає вказану команду в папках node_modules/.bin в поточній директорії. Це означає, що ви можете викликати будь-яку команду з будь-якого встановленого локально пакету Node.js безпосередньо з командного рядка.

Крім того, NPX дозволяє виконувати команди, які не є встановленими локально, наприклад, з GitHub чи інших джерел, просто вказавши шлях до цих команд.



*** package.json і package-lock.json. node_modules
package.json
package.json - це файл конфігурації вашого проекту. Він містить метадані про проект, такі як назва, версія, опис, автор, ліцензія та інші налаштування. Крім того, головною функцією package.json є визначення залежностей проекту.

package-lock.json
package-lock.json - це автоматично генерований файл, який містить деталі про конкретні версії пакетів, що використовуються в вашому проекті. Він забезпечує стабільність та повторюваність версій залежностей між різними середовищами



*** node_modules
node_modules - це директорія, яка містить усі залежності (пакети), встановлені для проекту на базі Node.js за допомогою пакетного менеджера npm. Кожен пакет представлений окремою піддиректорією у node_modules, і ця структура дозволяє організовувати та управляти залежностями вашого проекту.

Коли ви встановлюєте пакети за допомогою команди npm install, (Встановлює всі залежності, перераховані у файлі package.json) вони завантажуються з Інтернету та розміщуються в директорії node_modules. Кожен пакет може мати свої власні залежності, які також розміщуються у відповідних піддиректоріях в node_modules.



*** Версіонування пакетів в npm (Версії)
Major Version (X.0.0): Зміни в мажорній версії вказують на несумісні зміни у API або інтерфейсі пакету. Це означає, що певні функціональності можуть бути ламані при оновленні пакету на нову мажорну версію.
Minor Version (0.Y.0): Зміни в мінорній версії вказують на додані функціональності, які зберігають зворотну сумісність. Тобто, при оновленні на нову мінорну версію, не повинно бути ламаних функціональностей.
Patch Version (0.0.Z): Зміни у патч-версії вказують на виправлення помилок або дрібні покращення, які не впливають на зовнішній інтерфейс.
Префікси версій:

^: Дозволяє оновлювати до нових мінорних та патч-версій (наприклад, ^1.2.3 означає 1.x.x, де x - будь-яка версія).
~: Дозволяє оновлювати до нової патч-версії (наприклад, ~1.2.3 означає 1.2.x, де x - будь-яка версія).