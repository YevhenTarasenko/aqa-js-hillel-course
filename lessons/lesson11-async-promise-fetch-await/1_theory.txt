_____________________________________________________________________________________________________________________________________________________
JavaScript Асинхронність
_____________________________________________________________________________________________________________________________________________________
	Call Stack (Стек викликів)
- Синхронні операції: Call Stack обробляє синхронні операції. Коли ви викликаєте функцію, вона додається до Call Stack і виконується. Якщо ця функція викликає інші функції, вони також додаються до стека і виконуються по порядку.

Якщо при виконанні операцій в Call Stack заявляться асинхронна операція:
1. Асинхронна частина функції передається до відповідного API (Web API в браузері або Node API). 
2. Така функція видаляється з Call Stack, дозволяючи основному потоку продовжувати виконання. 
3. API обробляє асинхронну операцію у ФОНОВОМУ режимі.
4. Callback додається до Callback Queue після завершення асинхронної операції.
5. Event Loop перевіряє Call Stack і Callback Queue.
6. Callback (результат асинхронної операції) переміщується до Call Stack і виконується, коли Call Stack порожній.
_____________________________________________________________________________________________________________________________________________________
	Callback Queue (Черга зворотних викликів)
- Черга асинхронних функцій, які чекають на виконання: Callback Queue містить функції, які були завершені асинхронно і тепер готові до виконання. Ці функції додаються до черги після завершення відповідних асинхронних операцій.
_____________________________________________________________________________________________________________________________________________________
	Event Loop (Цикл подій)
- Event Loop обробляє як синхронні, так і асинхронні операції. Він забезпечує, щоб синхронні операції виконувались негайно в Call Stack, а асинхронні операції оброблялися відповідними API і додавалися до Callback Queue, звідки вони будуть переміщені до Call Stack для виконання, коли Call Stack буде порожнім. Це дозволяє JavaScript ефективно обробляти обидва типи операцій, забезпечуючи плавне і неперервне виконання коду.

Він постійно перевіряє Call Stack і Callback Queue. Коли Call Stack порожній, Event Loop переміщує завдання з Callback Queue до Call Stack для виконання. Таким чином, Event Loop забезпечує неперервне виконання коду, обробляючи асинхронні операції, коли стек викликів порожній.
_____________________________________________________________________________________________________________________________________________________
	Web APIs (Веб-API)
- Набір інтерфейсів для виконання асинхронних функцій в браузері: Web APIs - це набір інтерфейсів, наданих браузером, для виконання асинхронних операцій, таких як таймери (setTimeout), HTTP-запити (XMLHttpRequest, fetch), обробка подій (addEventListener) і т.д. Ці API працюють у фоновому режимі, а потім додають зворотні виклики до Callback Queue після завершення операцій.
_____________________________________________________________________________________________________________________________________________________

	Підсумок

Ось уточнені визначення:

1. Call Stack (Стек викликів): Виконує синхронний код у порядку "останній прийшов - перший пішов".
2. Event Loop (Цикл подій): Механізм, який забезпечує безперервне виконання коду, переміщуючи завдання з Callback Queue до Call Stack, коли Call Stack порожній.
3. Callback Queue (Черга зворотних викликів): Черга, в якій збираються функції, які були завершені асинхронно і тепер чекають на виконання в Call Stack.
4. Web APIs (Веб-API): Набір інтерфейсів, наданих браузером, для виконання асинхронних операцій, які після завершення додають зворотні виклики до Callback Queue.
_____________________________________________________________________________________________________________________________________________________