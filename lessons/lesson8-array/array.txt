_____________________________________________________________________________________________________________________________________________________
Ітерація по масиву

Цикл for
Цей цикл є класичним способом ітерації. Ви можете використовувати цикл for для перебору всіх елементів масиву за допомогою індексів.
const numbers = [1, 2, 3, 4, 5];
for (let i = 0; i < numbers.length; i++) {
    console.log(numbers[i]); // Виведе всі числа з масиву
}

Цикл for...of
Цикл for...of є зручним способом для ітерації (перебору) елементів масиву у сучасному JavaScript. Він дозволяє безпосередньо перебирати значення елементів масиву без необхідності вказувати індекси. Давайте розглянемо деталі його роботи.

const colors = ['red', 'green', 'blue', 'yellow'];

for (const color of colors) {
    console.log(color);
}

У цьому прикладі ми створили масив colors і використали цикл for...of, щоб вивести кожен елемент масиву на консоль.

Приклад:

const numbers = [2, -5, 0, 7, -3, 0, 10, -8];
let positiveCount = 0;
let negativeCount = 0;
let zeroCount = 0;

for (let el of numbers) {
	if (el > 0) {
		positiveCount += 1
	}
	if (el < 0) {
		negativeCount += 1
	}
	if (el === 0) {
		zeroCount += 1
	};
}

console.log('Кількість позитивних чисел:', positiveCount)
console.log('Кількість негативних чисел:', negativeCount)
console.log('Кількість нульових чисел:', zeroCount)
_____________________________________________________________________________________________________________________________________________________
split()

Метод split() дозволяє розділити рядок на масив підрядків за вказаним роздільником.

const sentence = "Це речення має кілька слів";
const words = sentence.split(" ");
console.log(words); // ["Це", "речення", "має", "кілька", "слів"]
_____________________________________________________________________________________________________________________________________________________
join()

Метод join() об'єднує всі елементи масиву в один рядок за допомогою вказаного роздільника.

const fruits = ["яблуко", "банан", "полуниця"];
const fruitString = fruits.join(", ");
console.log(fruitString); // "яблуко, банан, полуниця"
_____________________________________________________________________________________________________________________________________________________
indexOf()

Метод indexOf() повертає індекс першого входження вказаного елемента у масиві. Якщо елемент не знайдено, повертається -1.

const numbers = [10, 20, 30, 40, 50];
const index = numbers.indexOf(30);
console.log(index); // 2
_____________________________________________________________________________________________________________________________________________________
includes()

Метод includes() перевіряє, чи містить масив вказаний елемент. Він повертає true, якщо елемент є у масиві, і false, якщо ні.

const colors = ["червоний", "зелений", "синій"];
const hasGreen = colors.includes("зелений");
console.log(hasGreen); // true
_____________________________________________________________________________________________________________________________________________________
push()

Метод push() додає один або кілька елементів в кінець масиву.

const stack = [1, 2];
stack.push(3, 4);
console.log(stack); // [1, 2, 3, 4]
_____________________________________________________________________________________________________________________________________________________
pop()

Метод pop() видаляє останній елемент з масиву і повертає його значення

const stack = [1, 2, 3, 4];
const poppedValue = stack.pop();
console.log(poppedValue); // 4
console.log(stack); // [1, 2, 3]
_____________________________________________________________________________________________________________________________________________________
shift()

Метод shift() видаляє перший елемент з масиву і повертає його значення.

const queue = ["A", "B", "C"];
const shiftedValue = queue.shift();
console.log(shiftedValue); // "A"
console.log(queue); // ["B", "C"]
_____________________________________________________________________________________________________________________________________________________
unshift()

Метод unshift() додає один або кілька елементів на початок масиву.

const queue = ["B", "C"];
queue.unshift("A");
console.log(queue); // ["A", "B", "C"]
_____________________________________________________________________________________________________________________________________________________
slice()

Метод slice() створює новий масив, який включає елементи від вказаного індексу (включно) до кінця масиву (або до вказаного індексу, не включно).

const numbers = [1, 2, 3, 4, 5];
const slicedArray = numbers.slice(2); // [3, 4, 5]

	Додавання елементів
Метод splice() може додавати нові елементи до масиву. Щоб це зробити, вам потрібно вказати початковий індекс, за яким потрібно вставити нові елементи, а також кількість елементів, які слід видалити (в даному випадку 0), і самі елементи, які ви хочете додати.

const colors = ["червоний", "зелений", "синій"];
colors.splice(1, 0, "жовтий", "оранжевий");
console.log(colors); // ["червоний", "жовтий", "оранжевий", "зелений", "синій"]

У цьому прикладі ми додали "жовтий" і "оранжевий" між "червоним" і "зеленим".

	Видалення елементів
Метод splice() також може видаляти елементи з масиву. Для цього вам потрібно вказати початковий індекс, з якого слід почати видалення, і кількість елементів, які слід видалити.

const numbers = [1, 2, 3, 4, 5];
numbers.splice(2, 2); // Видаляємо 2 елементи починаючи з індексу 2
console.log(numbers); // [1, 2, 5]

В цьому прикладі ми видалили "3" і "4" починаючи з індексу 2.

	Додавання та видалення одночасно
Метод splice() дозволяє одночасно додавати та видаляти елементи. Для цього ви можете вказати кількість елементів, які слід видалити, і потім перерахувати елементи, які слід додати після видалення.

const animals = ["кіт", "собака", "зебра", "слон"];
animals.splice(1, 2, "тигр", "лев");
console.log(animals); // ["кіт", "тигр", "лев", "слон"]

Ми видалили "собаку" і "зебру" (2 елементи починаючи з індексу 1) та додали "тигра" та "льва" на їхнє місце.
_____________________________________________________________________________________________________________________________________________________
concat()

Метод concat() об'єднує два або більше масиви, створюючи новий масив.

const array1 = [1, 2];
const array2 = [3, 4];
const concatenatedArray = array1.concat(array2);
console.log(concatenatedArray); // [1, 2, 3, 4]
_____________________________________________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________________________________________

forEach

Метод forEach дозволяє виконати задану функцію для кожного елементу масиву без створення нового масиву.
const numbers = [1, 2, 3, 4, 5];
numbers.forEach((number) => {
  console.log(number * 2);
});
_____________________________________________________________________________________________________________________________________________________
filter

Метод filter створює новий масив з елементами, які задовольняють певну умову.

const numbers = [1, 2, 3, 4, 5];
const evenNumbers = numbers.filter((number) => number % 2 === 0);

let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let evenNumbers = numbers.filter((number) => number % 2 === 0)
console.log(evenNumbers)
_____________________________________________________________________________________________________________________________________________________
find

Метод find повертає перший елемент масиву, який задовольняє певну умову.

const numbers = [1, 2, 3, 4, 5];
const firstEvenNumber = numbers.find((number) => number % 2 === 0);
_____________________________________________________________________________________________________________________________________________________
findIndex

Метод findIndex повертає індекс першого елементу масиву, який задовольняє певну умову.

const numbers = [1, 2, 3, 4, 5];
const firstEvenNumberIndex = numbers.findIndex((number) => number % 2 === 0);
_____________________________________________________________________________________________________________________________________________________
map

Метод map створює новий масив, який є копією вихідного масиву та застосовує переданий колбек для кожного з елементів нового масиву.

const numbers = [1, 2, 3, 4, 5];
const doubledNumbers = numbers.map((number) => number * 2);

Приклад:
const initialArray = [1, 2, 3, 4, 5];
let newArray = initialArray.map((el, index) => el * index);
console.log(newArray);
_____________________________________________________________________________________________________________________________________________________
flat та flatMap

Метод flat вирівнює вкладені масиви в одному рівні.

const nestedArray = [[1, 2], [3, 4], [5, 6]];
const flatArray = nestedArray.flat(); // [1, 2, 3, 4, 5, 6]

Метод flatMap поєднує вирівнювання та перетворення кожного елементу за допомогою стрілочної функції. Він є поєднанням методів map та flat.

const numbers = [1, 2, 3];
const doubledAndFlattened = numbers.flatMap((number) => [number * 2, number * 3]); // [2, 3, 4, 6, 6, 9]
_____________________________________________________________________________________________________________________________________________________
sort

Метод sort сортує елементи масиву на місці згідно з певним порядком за допомогою стрілочної функції.

const months = ['March', 'Jan', 'Feb', 'Dec'];
months.sort();
console.log(months); //  ["Dec", "Feb", "Jan", "March"]

const numbersList = [1, 10, 14, 2, 4, 5, 43, 34];
numbersList.sort((a, b) => a - b);
console.log(numbersList); //  [1, 2, 4, 5, 10, 14, 34, 43]
_____________________________________________________________________________________________________________________________________________________
reverse

Метод reverse змінює порядок елементів масиву на протилежний.

const numbers = [1, 2, 3, 4, 5];
numbers.reverse(); // [5, 4, 3, 2, 1]
_____________________________________________________________________________________________________________________________________________________
reduce

Метод reduce застосовує задану стрілочну функцію до аккумулятора та кожного елементу масиву, результатом є одне значення. Аккумулятор - це змінна яка зберігається між всіма ітераціями.

reduce приймає 2 параметри:

Колбек який буде виконано для кожного елемента
Початкове значення аккумулятора (необов’язковий параметр)

const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0); // 15

const numbers = [10, 20, 30, 40, 50];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum);
_____________________________________________________________________________________________________________________________________________________
includes

Метод includes перевіряє, чи масив містить певний елемент і повертає булеве значення.

const numbers = [1, 2, 3, 4, 5];
const hasThree = numbers.includes(3); // true
_____________________________________________________________________________________________________________________________________________________
some та every

Метод some перевіряє, чи хоча б один елемент масиву задовольняє певну умову і повертає булеве значення.

const numbers = [1, 2, 3, 4, 5];
const hasEvenNumber = numbers.some((number) => number % 2 === 0); // true

Метод every перевіряє, чи всі елементи масиву задовольняють певну умову і повертає булеве значення.

const numbers = [2, 4, 6, 7, 10];
const allEvenNumbers = numbers.every((number) => number % 2 === 0); // false
_____________________________________________________________________________________________________________________________________________________
Копіювання масивів

За допомогою методу slice(): Метод slice() без аргументів створює поверхневу копію масиву. Наприклад:
const originalArray = [1, 2, 3, 4, 5];
const copiedArray = originalArray.slice();

Використовуючи метод concat(): Метод concat() також створює копію масиву. Наприклад:
const originalArray = [1, 2, 3, 4, 5];
const copiedArray = [].concat(originalArray);

За допомогою оператора Spread (...): Оператор Spread розгортає масив, створюючи його копію. Наприклад:
const originalArray = [1, 2, 3, 4, 5];
const copiedArray = [...originalArray];

За допомогою методу Array.from(): Метод Array.from() створює копію масиву. Наприклад:
const originalArray = [1, 2, 3, 4, 5];
const copiedArray = Array.from(originalArray);
_____________________________________________________________________________________________________________________________________________________Set()

Set - це об'єкт, який представляє собою колекцію унікальних значень у вигляді набору (списку) значень. У Set кожне значення може зустрічатися тільки один раз, що робить його корисним для видалення дублікатів у масивах або перевірки наявності значень. Set є одним із типів вбудованих об'єктів у JavaScript.

Для створення нового об'єкта типу Set можна використовувати конструктор Set() або створити його з ітерабельного об'єкта (наприклад, масиву) за допомогою Set(iterable):

add(value): Додає значення до Set. Якщо значення вже існує у Set, воно не буде додане дублікатом.
set.add(6);

delete(value): Видаляє значення з Set. Якщо значення було видалено, метод повертає true, якщо значення не було знайдено, він повертає false.
set.delete(4); // true

has(value): Перевіряє, чи містить Set вказане значення. Повертає true, якщо значення є в Set, і false, якщо воно відсутнє.
set.has(2); // true

clear(): Видаляє всі значення з Set.
set.clear();

size (властивість): Повертає кількість унікальних значень в Set.
const size = set.size; // Поверне 2

Приклад:
const arr = [1, 2, 2, 3, 4, 4, 5];
const uniqueValues = [...new Set(arr)]; // [1, 2, 3, 4, 5]
_____________________________________________________________________________________________________________________________________________________